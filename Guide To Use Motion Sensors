In order to use the Sensor of the devide you need to declare two variables that will be used that are 
the Sensor Manager and the Sensor. The Sensor Manager will check for the availability of the Sensor, and
give us access to it.

  private SensorManager mSensorManager;           //This manager will be used for the Accelerometer
  private SensorManager mGyroSensorManager;       //This manager will be used for the Gyroscope

  private Sensor mSensor;                         //Sensor variable for the Accelerometer
  private Sensor mGyroSensor;                     //Sensor variable for the Gyroscope
  
Before starting to look for sensors we need to create an instance of SensorEventListener and implement the interface:

    public class MainActivity extends AppCompatActivity implements SensorEventListener{
      ...
    }
The next step is to implement the functions in the interface, wich are two: 
  - onAccuracyChanged(Sensor sensor, int accuracy)
  - onSensorChanged(SensorEvent event)
For purposes of this lesson, we will only be using onSensorChanged to controll the events created by the sensors.
  
To look for the sensor we will create a function that will be performed at onCreate() 
such function will be named checkForSensors(). (This functions and its comments are also in the code)

   private void checkForSensors(){
        mSensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE); /* The Sensor Manager for the Accelerometer */
        mGyroSensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE); /* The Sensor Manager for the Gyroscope */
        if (mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER) != null){ /* Check if it's available */
            mSensor = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER); /* Obtain the Sensor from the manager and keep it in the mSensor Variable */
            System.out.println("There is an accelerometer");
        }
        else {
            // In this part we could exit the application because we don't have an accelerometer
            System.out.println("No Accelerometer Detected");
        }

        if (mSensorManager.getDefaultSensor(Sensor.TYPE_GYROSCOPE) != null){ /* Check if it's available */
            mGyroSensor = mSensorManager.getDefaultSensor(Sensor.TYPE_GYROSCOPE); /* Obtain the Sensor from the manager and keep it in the mGyroSensor Variable */
            System.out.println("There is a Gyroscope");
        }
        else {
            // In this part we could exit the application because we don't have a gyroscope
            System.out.println("No Gyroscope Detected");
        }
    }
    
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        ...
        checkForSensors();
    }
    
Now is time to use the onSensorChanged(SensorEvent event) function. In case the function is triggered then we will only be
checking for wich sensor is which in order to not confuse the app, because we will be using two sensors. Every time the function
is called, then we will only need to know which sensor is which.

    @Override
    public void onSensorChanged(SensorEvent event) {
        SensorEvent sensorEvent = event;
        if(sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER){ /* used to identify if the event was triggered by the accelerometer or the gyroscope */
            //System.out.println("Accelerometer: x="+event.values[0]+"|y="+event.values[1]+"|z="+event.values[2]);
        }
        if(sensorEvent.sensor.getType() == Sensor.TYPE_GYROSCOPE){
            //System.out.println("Gyroscope:     x="+event.values[0]+"|y="+event.values[1]+"|z="+event.values[2]);
        }
    }
    
The Accelerometer will give you the force applied to each axis of the sensor, which are three: x, y, z.
The Gyroscope will give the speed in which the axis is being rotated, if it gives one turn of 360 degrees in one second then,
the speed of the x is 2rps(2 radians per second), So the sensor will return each speed of every axis.

The last step is to stop the sensor once the applications is exited, for this we will use the onResume() and onPause() functions,
this is for the app to not drain the battery of your device.

    @Override
    protected void onResume() {
        super.onResume();
        /* when the application resumes then the sensor can start listening again */
        mSensorManager.registerListener(this, mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER), SensorManager.SENSOR_DELAY_NORMAL);
        mGyroSensorManager.registerListener(this, mGyroSensorManager.getDefaultSensor(Sensor.TYPE_GYROSCOPE), SensorManager.SENSOR_DELAY_NORMAL);
    }

    @Override
    protected void onPause() {
        super.onPause();
        /* when the application pauses, then the sensor should stop listening to avoid wasting the battery of the device */
        mSensorManager.unregisterListener(this);
        mGyroSensorManager.unregisterListener(this);
    }

And now you're ready to go and use the values that the sensor gives you.
